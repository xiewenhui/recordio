// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "document.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Links_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Links_reflection_ = NULL;
const ::google::protobuf::Descriptor* Language_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Language_reflection_ = NULL;
const ::google::protobuf::Descriptor* Name_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Name_reflection_ = NULL;
const ::google::protobuf::Descriptor* Document_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Document_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_document_2eproto() {
  protobuf_AddDesc_document_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "document.proto");
  GOOGLE_CHECK(file != NULL);
  Links_descriptor_ = file->message_type(0);
  static const int Links_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Links, backward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Links, forward_),
  };
  Links_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Links_descriptor_,
      Links::default_instance_,
      Links_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Links, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Links, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Links));
  Language_descriptor_ = file->message_type(1);
  static const int Language_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Language, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Language, country_),
  };
  Language_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Language_descriptor_,
      Language::default_instance_,
      Language_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Language, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Language, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Language));
  Name_descriptor_ = file->message_type(2);
  static const int Name_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Name, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Name, url_),
  };
  Name_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Name_descriptor_,
      Name::default_instance_,
      Name_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Name, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Name, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Name));
  Document_descriptor_ = file->message_type(3);
  static const int Document_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, docid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, payload_),
  };
  Document_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Document_descriptor_,
      Document::default_instance_,
      Document_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Document));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_document_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Links_descriptor_, &Links::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Language_descriptor_, &Language::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Name_descriptor_, &Name::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Document_descriptor_, &Document::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_document_2eproto() {
  delete Links::default_instance_;
  delete Links_reflection_;
  delete Language::default_instance_;
  delete Language_reflection_;
  delete Name::default_instance_;
  delete Name_reflection_;
  delete Document::default_instance_;
  delete Document_reflection_;
}

void protobuf_AddDesc_document_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016document.proto\"*\n\005Links\022\020\n\010backward\030\001 "
    "\003(\003\022\017\n\007forward\030\002 \003(\003\")\n\010Language\022\014\n\004code"
    "\030\001 \002(\t\022\017\n\007country\030\002 \001(\t\"0\n\004Name\022\033\n\010langu"
    "age\030\001 \003(\0132\t.Language\022\013\n\003url\030\002 \001(\t\"V\n\010Doc"
    "ument\022\r\n\005docid\030\001 \002(\003\022\025\n\005links\030\002 \001(\0132\006.Li"
    "nks\022\023\n\004name\030\003 \003(\0132\005.Name\022\017\n\007payload\030\004 \001("
    "\t", 241);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "document.proto", &protobuf_RegisterTypes);
  Links::default_instance_ = new Links();
  Language::default_instance_ = new Language();
  Name::default_instance_ = new Name();
  Document::default_instance_ = new Document();
  Links::default_instance_->InitAsDefaultInstance();
  Language::default_instance_->InitAsDefaultInstance();
  Name::default_instance_->InitAsDefaultInstance();
  Document::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_document_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_document_2eproto {
  StaticDescriptorInitializer_document_2eproto() {
    protobuf_AddDesc_document_2eproto();
  }
} static_descriptor_initializer_document_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Links::kBackwardFieldNumber;
const int Links::kForwardFieldNumber;
#endif  // !_MSC_VER

Links::Links()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Links::InitAsDefaultInstance() {
}

Links::Links(const Links& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Links::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Links::~Links() {
  SharedDtor();
}

void Links::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Links::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Links::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Links_descriptor_;
}

const Links& Links::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_document_2eproto();  return *default_instance_;
}

Links* Links::default_instance_ = NULL;

Links* Links::New() const {
  return new Links;
}

void Links::Clear() {
  backward_.Clear();
  forward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Links::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 backward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_backward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_backward())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_backward())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_backward;
        if (input->ExpectTag(16)) goto parse_forward;
        break;
      }
      
      // repeated int64 forward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_forward())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_forward())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_forward;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Links::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 backward = 1;
  for (int i = 0; i < this->backward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->backward(i), output);
  }
  
  // repeated int64 forward = 2;
  for (int i = 0; i < this->forward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->forward(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Links::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 backward = 1;
  for (int i = 0; i < this->backward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->backward(i), target);
  }
  
  // repeated int64 forward = 2;
  for (int i = 0; i < this->forward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->forward(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Links::ByteSize() const {
  int total_size = 0;
  
  // repeated int64 backward = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->backward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->backward(i));
    }
    total_size += 1 * this->backward_size() + data_size;
  }
  
  // repeated int64 forward = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->forward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->forward(i));
    }
    total_size += 1 * this->forward_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Links::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Links* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Links*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Links::MergeFrom(const Links& from) {
  GOOGLE_CHECK_NE(&from, this);
  backward_.MergeFrom(from.backward_);
  forward_.MergeFrom(from.forward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Links::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Links::CopyFrom(const Links& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Links::IsInitialized() const {
  
  return true;
}

void Links::Swap(Links* other) {
  if (other != this) {
    backward_.Swap(&other->backward_);
    forward_.Swap(&other->forward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Links::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Links_descriptor_;
  metadata.reflection = Links_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Language::kCodeFieldNumber;
const int Language::kCountryFieldNumber;
#endif  // !_MSC_VER

Language::Language()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Language::InitAsDefaultInstance() {
}

Language::Language(const Language& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Language::SharedCtor() {
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Language::~Language() {
  SharedDtor();
}

void Language::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (this != default_instance_) {
  }
}

void Language::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Language::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Language_descriptor_;
}

const Language& Language::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_document_2eproto();  return *default_instance_;
}

Language* Language::default_instance_ = NULL;

Language* Language::New() const {
  return new Language;
}

void Language::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::kEmptyString) {
        country_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Language::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_country;
        break;
      }
      
      // optional string country = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Language::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->code(), output);
  }
  
  // optional string country = 2;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->country(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Language::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }
  
  // optional string country = 2;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->country(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Language::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }
    
    // optional string country = 2;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Language::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Language* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Language*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Language::MergeFrom(const Language& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Language::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Language::CopyFrom(const Language& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Language::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Language::Swap(Language* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(country_, other->country_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Language::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Language_descriptor_;
  metadata.reflection = Language_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Name::kLanguageFieldNumber;
const int Name::kUrlFieldNumber;
#endif  // !_MSC_VER

Name::Name()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Name::InitAsDefaultInstance() {
}

Name::Name(const Name& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Name::SharedCtor() {
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Name::~Name() {
  SharedDtor();
}

void Name::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void Name::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Name::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Name_descriptor_;
}

const Name& Name::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_document_2eproto();  return *default_instance_;
}

Name* Name::default_instance_ = NULL;

Name* Name::New() const {
  return new Name;
}

void Name::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  language_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Name::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Language language = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_language()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_language;
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }
      
      // optional string url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Name::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Language language = 1;
  for (int i = 0; i < this->language_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->language(i), output);
  }
  
  // optional string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Name::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Language language = 1;
  for (int i = 0; i < this->language_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->language(i), target);
  }
  
  // optional string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Name::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
  }
  // repeated .Language language = 1;
  total_size += 1 * this->language_size();
  for (int i = 0; i < this->language_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->language(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Name::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Name* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Name*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Name::MergeFrom(const Name& from) {
  GOOGLE_CHECK_NE(&from, this);
  language_.MergeFrom(from.language_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Name::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Name::CopyFrom(const Name& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Name::IsInitialized() const {
  
  for (int i = 0; i < language_size(); i++) {
    if (!this->language(i).IsInitialized()) return false;
  }
  return true;
}

void Name::Swap(Name* other) {
  if (other != this) {
    language_.Swap(&other->language_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Name::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Name_descriptor_;
  metadata.reflection = Name_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Document::kDocidFieldNumber;
const int Document::kLinksFieldNumber;
const int Document::kNameFieldNumber;
const int Document::kPayloadFieldNumber;
#endif  // !_MSC_VER

Document::Document()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Document::InitAsDefaultInstance() {
  links_ = const_cast< ::Links*>(&::Links::default_instance());
}

Document::Document(const Document& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Document::SharedCtor() {
  _cached_size_ = 0;
  docid_ = GOOGLE_LONGLONG(0);
  links_ = NULL;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Document::~Document() {
  SharedDtor();
}

void Document::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (this != default_instance_) {
    delete links_;
  }
}

void Document::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Document_descriptor_;
}

const Document& Document::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_document_2eproto();  return *default_instance_;
}

Document* Document::default_instance_ = NULL;

Document* Document::New() const {
  return new Document;
}

void Document::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    docid_ = GOOGLE_LONGLONG(0);
    if (has_links()) {
      if (links_ != NULL) links_->::Links::Clear();
    }
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
  }
  name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Document::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 docid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &docid_)));
          set_has_docid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_links;
        break;
      }
      
      // optional .Links links = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_links:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_links()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // repeated .Name name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        if (input->ExpectTag(34)) goto parse_payload;
        break;
      }
      
      // optional string payload = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payload()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->payload().data(), this->payload().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Document::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 docid = 1;
  if (has_docid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->docid(), output);
  }
  
  // optional .Links links = 2;
  if (has_links()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->links(), output);
  }
  
  // repeated .Name name = 3;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->name(i), output);
  }
  
  // optional string payload = 4;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payload().data(), this->payload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->payload(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Document::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 docid = 1;
  if (has_docid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->docid(), target);
  }
  
  // optional .Links links = 2;
  if (has_links()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->links(), target);
  }
  
  // repeated .Name name = 3;
  for (int i = 0; i < this->name_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->name(i), target);
  }
  
  // optional string payload = 4;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payload().data(), this->payload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->payload(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Document::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 docid = 1;
    if (has_docid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->docid());
    }
    
    // optional .Links links = 2;
    if (has_links()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->links());
    }
    
    // optional string payload = 4;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->payload());
    }
    
  }
  // repeated .Name name = 3;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->name(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Document* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Document*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Document::MergeFrom(const Document& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_.MergeFrom(from.name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_docid()) {
      set_docid(from.docid());
    }
    if (from.has_links()) {
      mutable_links()->::Links::MergeFrom(from.links());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Document::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document::CopyFrom(const Document& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < name_size(); i++) {
    if (!this->name(i).IsInitialized()) return false;
  }
  return true;
}

void Document::Swap(Document* other) {
  if (other != this) {
    std::swap(docid_, other->docid_);
    std::swap(links_, other->links_);
    name_.Swap(&other->name_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Document::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Document_descriptor_;
  metadata.reflection = Document_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
