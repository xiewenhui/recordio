// Code generated by protoc-gen-go.
// source: document.proto
// DO NOT EDIT!

/*
Package recordio is a generated protocol buffer package.

It is generated from these files:
	document.proto

It has these top-level messages:
	Links
	Language
	Name
	Document
*/
package recordio

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Links struct {
	Backward []int64 `protobuf:"varint,1,rep,packed,name=backward" json:"backward,omitempty"`
	Forward  []int64 `protobuf:"varint,2,rep,packed,name=forward" json:"forward,omitempty"`
}

func (m *Links) Reset()                    { *m = Links{} }
func (m *Links) String() string            { return proto.CompactTextString(m) }
func (*Links) ProtoMessage()               {}
func (*Links) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Links) GetBackward() []int64 {
	if m != nil {
		return m.Backward
	}
	return nil
}

func (m *Links) GetForward() []int64 {
	if m != nil {
		return m.Forward
	}
	return nil
}

type Language struct {
	Code    string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Country string `protobuf:"bytes,2,opt,name=country" json:"country,omitempty"`
}

func (m *Language) Reset()                    { *m = Language{} }
func (m *Language) String() string            { return proto.CompactTextString(m) }
func (*Language) ProtoMessage()               {}
func (*Language) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Language) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Language) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

type Name struct {
	Language []*Language `protobuf:"bytes,1,rep,name=language" json:"language,omitempty"`
	Url      string      `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

func (m *Name) Reset()                    { *m = Name{} }
func (m *Name) String() string            { return proto.CompactTextString(m) }
func (*Name) ProtoMessage()               {}
func (*Name) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Name) GetLanguage() []*Language {
	if m != nil {
		return m.Language
	}
	return nil
}

func (m *Name) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type Document struct {
	Docid   int64   `protobuf:"varint,1,opt,name=docid" json:"docid,omitempty"`
	Links   *Links  `protobuf:"bytes,2,opt,name=links" json:"links,omitempty"`
	Name    []*Name `protobuf:"bytes,3,rep,name=name" json:"name,omitempty"`
	Payload string  `protobuf:"bytes,4,opt,name=payload" json:"payload,omitempty"`
}

func (m *Document) Reset()                    { *m = Document{} }
func (m *Document) String() string            { return proto.CompactTextString(m) }
func (*Document) ProtoMessage()               {}
func (*Document) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Document) GetDocid() int64 {
	if m != nil {
		return m.Docid
	}
	return 0
}

func (m *Document) GetLinks() *Links {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *Document) GetName() []*Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Document) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func init() {
	proto.RegisterType((*Links)(nil), "recordio.Links")
	proto.RegisterType((*Language)(nil), "recordio.Language")
	proto.RegisterType((*Name)(nil), "recordio.Name")
	proto.RegisterType((*Document)(nil), "recordio.Document")
}

func init() { proto.RegisterFile("document.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x50, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x55, 0xea, 0x04, 0xcc, 0x55, 0x2a, 0xe8, 0xc4, 0x60, 0x31, 0x55, 0x96, 0x90, 0x3a, 0x65,
	0x28, 0x0b, 0x0b, 0x1b, 0x03, 0x43, 0xc5, 0xe0, 0x3f, 0x70, 0x6d, 0x53, 0x45, 0x4d, 0x7c, 0x95,
	0x49, 0x84, 0xfa, 0x01, 0xfc, 0x37, 0xf2, 0x25, 0x29, 0xdd, 0xee, 0xdd, 0xbb, 0x7b, 0xf7, 0xde,
	0xc1, 0xca, 0x93, 0x1b, 0xba, 0x10, 0xfb, 0xfa, 0x94, 0xa8, 0x27, 0x94, 0x29, 0x38, 0x4a, 0xbe,
	0x21, 0xfd, 0x06, 0xd5, 0xae, 0x89, 0xc7, 0x6f, 0x7c, 0x02, 0xb9, 0xb7, 0xee, 0xf8, 0x63, 0x93,
	0x57, 0xc5, 0x5a, 0x6c, 0x84, 0xb9, 0x60, 0x54, 0x70, 0xfb, 0x45, 0x89, 0xa9, 0x05, 0x53, 0x33,
	0xd4, 0xaf, 0x20, 0x77, 0x36, 0x1e, 0x06, 0x7b, 0x08, 0x88, 0x50, 0x3a, 0xf2, 0x41, 0x15, 0xeb,
	0x62, 0x73, 0x67, 0xb8, 0xce, 0x9b, 0x8e, 0x86, 0xd8, 0xa7, 0xb3, 0x5a, 0x70, 0x7b, 0x86, 0xfa,
	0x03, 0xca, 0x4f, 0xdb, 0x05, 0xac, 0x41, 0xb6, 0x93, 0x02, 0xdf, 0x5d, 0x6e, 0xb1, 0x9e, 0xdd,
	0xd5, 0xb3, 0xb6, 0xb9, 0xcc, 0xe0, 0x03, 0x88, 0x21, 0xb5, 0x93, 0x5a, 0x2e, 0xf5, 0x6f, 0x01,
	0xf2, 0x7d, 0xca, 0x87, 0x8f, 0x50, 0x79, 0x72, 0x8d, 0x67, 0x17, 0xc2, 0x8c, 0x00, 0x9f, 0xa1,
	0x6a, 0x73, 0x4a, 0x5e, 0x5b, 0x6e, 0xef, 0xaf, 0x2e, 0xe4, 0xb6, 0x19, 0x59, 0xd4, 0x50, 0x46,
	0xdb, 0x05, 0x25, 0xd8, 0xc7, 0xea, 0x7f, 0x2a, 0x3b, 0x35, 0xcc, 0xe5, 0x44, 0x27, 0x7b, 0x6e,
	0xc9, 0x7a, 0x55, 0x8e, 0x89, 0x26, 0xb8, 0xbf, 0xe1, 0xdf, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x2c, 0x88, 0x12, 0xfe, 0x6d, 0x01, 0x00, 0x00,
}
